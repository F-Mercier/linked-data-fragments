package Step3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class FileParser {
	private Boolean reachedBGPs = false;
	private Triple tempTriple;
	private BGP tempBGP;
	List<BGP> bgpList = new ArrayList<BGP>();
	
	/** 
	 * 
	 * @param filePath the path to the file generated by Lift
	 * @throws FileNotFoundException if the path does not lead to a file
	 * @brief reads the whole file, adds all the BGPs to its list and adds all the triples to the related BGP
	 */
	public FileParser(String filePath) throws FileNotFoundException {
		File file = new File(filePath);
		Scanner input = new Scanner(file);
		
		while(input.hasNext()) {
		    String nextLine = input.nextLine();
		    if (nextLine.contains("Deduced BGPs")) {
		    	nextLine = input.nextLine();
		    	reachedBGPs = !reachedBGPs;
		    }
		    if (reachedBGPs) {
		    	if (nextLine.contains("BGP [no")) {
		    		tempBGP = new BGP(findBgp(nextLine));
		    		bgpList.add(tempBGP);
		    	}
		    	else {
		    		if (nextLine.contains("Deduced LDF_")) {
		    			tempTriple = new Triple(0, "", "", "");
		    			tempTriple.setNumero(findTriple(nextLine));
		    			setTriple(nextLine);
			    		tempTriple.convertSubject();
			    		tempTriple.convertPredicate();
			    		tempTriple.convertObject();
		    			tempBGP.addToTripleList(tempTriple);
		    		}
		    	}
		    }
		}
		input.close();
	}
	
	/**
	 * 
	 * @param bgp the studied line (corresponding to a BGP)
	 * @return the BGP identifier
	 * @brief selects the number between "o" and "]" and returns it
	 */
	public int findBgp(String bgp) {
		int nBGP;
		int start = bgp.indexOf("o");
		int finish = bgp.indexOf("]", start);
		nBGP = Integer.parseInt(bgp.substring(start + 1, finish));
		return nBGP;
	}
	
	/**
	 * 
	 * @param ldf the studied line (corresponding to a LDF)
	 * @return the LDF identifier
	 * @brief selects the number between "Deduced LDF_" and ": " and returns it
	 */
	public int findTriple(String ldf) {
		int nTriple;
		int start = ldf.indexOf("Deduced LDF_");
		int finish = ldf.indexOf(": ", start);
		nTriple = Integer.parseInt(ldf.substring(start + 12, finish));
		return nTriple;
	}
	
	/**
	 * 
	 * @param ldf the studied line (corresponding to a LDF)
	 * @brief detects the beginning and ending of each part and calls the corresponding method
	 */
	public void setTriple(String ldf) {
		int start = ldf.indexOf(": ");
		int finish = ldf.indexOf("     ", start + 1);
		tempTriple.setSubject(ldf.substring(start + 2, finish));
		
		start = finish;
		finish = ldf.indexOf("     ", start + 1);
		tempTriple.setPredicate(ldf.substring(start + 5, finish));
		
		start = finish;
		finish = ldf.length();
		tempTriple.setObject(ldf.substring(start + 5, finish));
	}
}
